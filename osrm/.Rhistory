curl::curl_download(query, output)
destination
output = "all2all.json"
query = paste0(router,"/table/v1/driving/",coords,"&annotations=duration")
curl::curl_download(query, output)
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
curl::curl_download(query, output)
library(jsonlite)
fromJSON("all2grenoble.json")
test = fromJSON("all2grenoble.json")
View(test)
View(test$destination)
View(test)
View(test$destinations)
View(test.destinations)
test = fromJSON("all2grenoble.json",  method='C')
library(rjson)
test = fromJSON("all2grenoble.json",  method='C')
install.packages("tidyjson")
library(tidyjson)
library(tidyjson)
test = read_json("all2grenoble.json")
View(test)
test = read_json("all2grenoble.json", format = "json")
test
View(test)
test = read_json("all2grenoble.json", format = "jsonl")
test = read_json("all2grenoble.json", format = "json")
# Test parse json
library(rjson)
test = fromJSON("all2grenoble.json")
View(test)
test["destinations"]
test
test$$distances
test$distances
test$durations
durations = test$durations
durations
class(durations)
View(durations)
destination <- match("Grenoble",isere$name) - 1
output = "all2grenoble.json"
query = paste0(router,"/table/v1/driving/",coords,"?destinations=",destination,"&annotations=duration")
toto = curl_fetch_memory(query, output)
toto = curl::curl_fetch_memory(query, output)
toto = curl::curl_fetch_stream(query, output)
curl::curl_fetch_echo(query, output)
toto = curl::curl_echo(query)
toto = curl::curl(query)
toto
fromJSON(toto)
toto = fromJSON(curl::curl(query))
View(toto)
toto$destintation
toto$destinations
toto$durations
output = "all2all.json"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
toto = fromJSON(curl::curl(query))
toto$durations
View(toto$durations)
isere$id
# Import data
isere = sf::st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
timedistIsere = rjson::fromJSON(curl::curl(query))$durations
timedistIsere = rjson::fromJSON(curl::curl(query))
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
curl::curl(query)
rjson::fromJSON(curl::curl(query))
toto = curl::curl(query)
rjson::fromJSON(toto)
timedist = rjson::fromJSON(response)
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
coords
timedist = rjson::fromJSON(response)
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
response
rjson::fromJSON(response)
timedist = rjson::fromJSON(response)
# Import data
isere = sf::st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Import data
isere = sf::st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Import data
library(sf)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
timedist = rjson::fromJSON(response)
# Get a matrix
library(rjson)
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
coords
response = curl::curl(query)
# Import data
library(sf)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
library(rjson)
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
timedist = rjson::fromJSON(response)
response = curl::curl(query)
router = "http://0.0.0.0:5000"
origin = "2.3357296443276074,48.859048717711595"
destination = "5.3839617993956175,43.293713055285956"
output = "test.json"
query = paste0(router,"/route/v1/car/",origin,";",destination,"?geometries=geojson&overview=full")
curl::curl_download(query, output)
# Get a matrix
library(rjson)
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl(query)
response
timedist = rjson::fromJSON(response)
curl::curl_download(query, output)
# Get a matrix
library(rjson)
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
r = curl::curl_echo(query)
r = curl::curl(query)
r = curl::curl_fetch_memory(query)
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl_fetch_memory(query)
timedist = rjson::fromJSON(response)
response
response = curl::curl(query)
response = curl::curl_echo(query)
response = curl::curl_fetch_disk(query)
response = curl::curl_fetch_stream(query)
response = curl::curl_fetch_echo(query)
response
773/800*20
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = curl::curl_download(query, "output/tmp.json")
timedist = rjson::fromJSON("output/tmp.json")
getwd()
output = "all2all.json"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
curl::curl_fetch_echo(query, output)
library(RCurl)
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
json_file = getURL(query)
json_file
# Packages
library(sf)
library(RCurl)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
json_file = getURL(query)
response = getURL(query)
library(rjson)
timedist = rjson::fromJSON(response)
timedist$durations
# Import data
library(sf)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = RCurl::getURL(query)
timedist = rjson::fromJSON(response)
timedist = timedist$durations
View(timedist)
class(timedist)
timedist = as.matrix(timedist$durations)
timedist = rjson::fromJSON(response)
View(timedist)
timedist = as.data.frame(timedist$durations)
class(timedist)
View(timedist)
x = as.data.frame(rjson::fromJSON(response))
View(x)
x = data.frame(rjson::fromJSON(response))
View(x)
x = data.frame(rjson::fromJSON(response), row.names = 0)
x = data.frame(rjson::fromJSON(response), row.names = 1)
x = data.frame(rjson::fromJSON(response), row.names = TRUE)
x = data.frame(rjson::fromJSON(response))
View(x)
x = data.frame(rjson::fromJSON(response))[,-1]
View(x)
isere$ids
isere$id
colnames(x) = c("id",isere$id)
View(x)
d$id = isere$id
x$id = isere$id
View(x)
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = RCurl::getURL(query)
x = data.frame(rjson::fromJSON(response))
View(x)
colnames(x) = c("id",isere$id)
View(x)
x$id = isere$id
View(x)
# Import data
library(sf)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = RCurl::getURL(query)
# Data Handling
outpout = data.frame(rjson::fromJSON(response))
colnames(output) = c("id",isere$id)
# Data Handling
output = data.frame(rjson::fromJSON(response))
colnames(output) = c("id",isere$id)
output$id = isere$id
# Export data
write.csv(x,"output/TimeDistCarIsere.csv")
# Export data
write.csv(output,"output/TimeDistCarIsere.csv")
# Data Handling
output = data.frame(rjson::fromJSON(response))
output = output$durations
output
output = output$duration
output
# Data Handling
output = data.frame(rjson::fromJSON(response))
output
# Data Handling
output = rjson::fromJSON(response)
output = output$duration
output
# Data Handling
output = rjson::fromJSON(response)
output = data.frame(output$duration)
output
View(output)
# Import data
library(sf)
isere = st_read("input/isere.geojson")
isere = isere[,c("id","name","lon", "lat")] %>% st_drop_geometry()
# Get coordinates
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?annotations=duration")
response = RCurl::getURL(query)
# Data Handling
output = rjson::fromJSON(response)
output = data.frame(output$duration)
View(output)
# Coordinates and ids
coords = paste(paste(isere$lon,isere$lat,sep=","), collapse = ";")
ids = isere$id
colnames(output) = ids
row.names(output) = ids
View(output)
# Export data
write.csv(output,"output/TimeDistCarIsere.csv")
# Data Import
library(sf)
lau2 = st_read("https://gisco-services.ec.europa.eu/distribution/v2/lau/geojson/LAU_RG_01M_2020_4326.geojson")
# Data handling
dots = st_centroid(lau2[lau2$CNTR_CODE == "FR",])
dots = cbind(dots,st_coordinates(dots))
dots = dots[,c("id","POP_2020","AREA_KM2","X","Y")] %>% st_drop_geometry()
colnames(dots) = c("id","pop","area","lon","lat")
dots = dots[dots$lat > 40.93,]
# Coordinates and ids
coords = paste(paste(dots$lon,dots$lat,sep=","), collapse = ";")
ids = dots$id
# destination
target = "FR_75056"
destination <- match(target, dots$id) - 1
# Tous les chemins menent à Rome
# Data Import
library(sf)
lau2 = st_read("https://gisco-services.ec.europa.eu/distribution/v2/lau/geojson/LAU_RG_01M_2020_4326.geojson")
# Data handling
dots = st_centroid(lau2[lau2$CNTR_CODE == "FR",])
dots = cbind(dots,st_coordinates(dots))
dots = dots[,c("id","POP_2020","AREA_KM2","X","Y")] %>% st_drop_geometry()
colnames(dots) = c("id","pop","area","lon","lat")
dots = dots[dots$lat > 40.93,]
# Coordinates and ids
coords = paste(paste(dots$lon,dots$lat,sep=","), collapse = ";")
ids = dots$id
# destination
target = "FR_75056"
destination <- match(target, dots$id) - 1
getdist = function(start){
# source
if(end > dim(dots)[1]){end = dim(dots)[1]}
source = paste(rep(start:end), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?destinations=",destination,"&sources=",source,"&annotations=duration")
start_time <- Sys.time()
response = RCurl::getURL(query)
end_time <- Sys.time()
end_time - start_time
# Data Handling
output = rjson::fromJSON(response)
output = data.frame(output$duration)
output = cbind(id = ids[(start+1):(end+1)], output)
colnames(output) = c("id","duration")
# Export data
file = paste0("tmp/TimeDistToParis_",start,"_",end,".csv")
write.csv(output,file, row.names = FALSE )
}
for(i in seq(from=0, to=34000, by=1000)){
getdist(i)
}
getdist = function(start){
# source
end = start + 999
if(end > dim(dots)[1]){end = dim(dots)[1]}
source = paste(rep(start:end), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?destinations=",destination,"&sources=",source,"&annotations=duration")
start_time <- Sys.time()
response = RCurl::getURL(query)
end_time <- Sys.time()
end_time - start_time
# Data Handling
output = rjson::fromJSON(response)
output = data.frame(output$duration)
output = cbind(id = ids[(start+1):(end+1)], output)
colnames(output) = c("id","duration")
# Export data
file = paste0("tmp/TimeDistToParis_",start,"_",end,".csv")
write.csv(output,file, row.names = FALSE )
}
for(i in seq(from=0, to=34000, by=1000)){
getdist(i)
}
getdist = function(start){
# source
end = start + 999
if(end > dim(dots)[1]){end = dim(dots)[1]-1}
source = paste(rep(start:end), collapse = ";")
# Get a matrix
router = "http://0.0.0.0:5000"
query = paste0(router,"/table/v1/driving/",coords,"?destinations=",destination,"&sources=",source,"&annotations=duration")
start_time <- Sys.time()
response = RCurl::getURL(query)
end_time <- Sys.time()
end_time - start_time
# Data Handling
output = rjson::fromJSON(response)
output = data.frame(output$duration)
output = cbind(id = ids[(start+1):(end+1)], output)
colnames(output) = c("id","duration")
# Export data
file = paste0("tmp/TimeDistToParis_",start,"_",end,".csv")
write.csv(output,file, row.names = FALSE )
}
getdist(3400)
getdist(34000)
tail(dots)
# Merge
getwd
# Merge
getwd()
list.files("tmp/")
# Merge
from = 0
list.files("tmp/")
files = list.files("tmp/")
files[0]
files[1]
read.csv(files[1])
read.csv(paste0("tmp/",files[1]))
a = read.csv(paste0("tmp/",files[1]))
View(a)
df = data.frame(c("id","duration"))
View(df)
df = data.frame(,c("id","duration"))
df = data.frame[,c("id","duration")]
df = data.frame[c("id","duration"),]
df <- data.frame(id="",duration="")
View(df)
df <- df[-1,]
View(df)
df <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
View(df)
df <- data.frame(id=character(),duration =  integer())
View(df)
length(file)
length(fileq)
length(files)
# Merge
df <- data.frame(id=character(),duration =  integer())
files = list.files("tmp/")
for(i in 1:length(files)){
file = read.csv(paste0("tmp/",files[1]))
df = rbind(df,file)
}
write.csv(df, "data/TimeDistToParis.csv", row.names = FALSE)
dim(df)
View(df)
df <- data.frame(id=character(),duration =  integer())
files = list.files("tmp/")
for(i in 1:length(files)){
file = read.csv(paste0("tmp/",files[i]))
df = rbind(df,file)
}
write.csv(df, "data/TimeDistToParis.csv", row.names = FALSE)
dim(df)
dim(coords)
length(coords)
nrows(coords)
dim(dots)
# Tous les chemins menent à Rome
# Data Import
library(sf)
lau2 = st_read("https://gisco-services.ec.europa.eu/distribution/v2/lau/geojson/LAU_RG_01M_2020_4326.geojson")
# Data handling
dots = st_centroid(lau2[lau2$CNTR_CODE == "FR",])
dots = cbind(dots,st_coordinates(dots))
dots = dots[,c("id","POP_2020","AREA_KM2","X","Y")] %>% st_drop_geometry()
colnames(dots) = c("id","pop","area","lon","lat")
dim(dots)
dots = dots[dots$lat > 40.93,]
dim(dots)
read.csv(paste0("tmp/",files[1])
read.csv(paste0("tmp/",files[1]))
x = read.csv(paste0("tmp/",files[1]))
dim(x)
x = read.csv(paste0("tmp/",files[2]))
dim(x)
x = read.csv(paste0("tmp/",files[3]))
dim(x)
x = read.csv(paste0("tmp/",files[4]))
dim(x)
length(files)
x = read.csv(paste0("tmp/",files[35]))
dim(x)
x = read.csv(paste0("tmp/",files[36]))
dim(x)
x = read.csv(paste0("tmp/",files[37]))
dim(x)
x = read.csv(paste0("tmp/",files[37]))
x = read.csv(paste0("tmp/",files[36]))
dim(x)
files[36]
x = read.csv("tmp/TimeDistToParis_34000_34837.csv")
dim(x)
=35*1000 + dim(x)
35*1000 + dim(x)
35*1000 + dim(x)[1]
# Merge
df <- data.frame(id=character(),duration =  integer())
files = list.files("tmp/")
for(i in 1:length(files)){
file = read.csv(paste0("tmp/",files[i]))
df = rbind(df,file)
}
write.csv(df, "data/TimeDistToParis.csv", row.names = FALSE)
dim(df)
# Intermediate files are deleted
unlink("tmp", recursive = TRUE)
